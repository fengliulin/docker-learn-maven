<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>
    <parent>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-parent</artifactId>
        <version>2.4.5</version>
        <relativePath/> <!-- lookup parent from repository -->
    </parent>

    <groupId>com.example</groupId>
    <artifactId>demo</artifactId>
    <version>0.0.1-SNAPSHOT</version>

    <name>demo</name>
    <description>Demo project for Spring Boot</description>
    <properties>
        <java.version>1.8</java.version>
    </properties>
    <dependencies>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-web</artifactId>
        </dependency>

        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-test</artifactId>
            <scope>test</scope>
        </dependency>


        <dependency>
            <groupId>com.spotify</groupId>
            <artifactId>docker-maven-plugin</artifactId>
            <version>1.2.2</version>
            <exclusions>
                <exclusion>
                    <groupId>org.apache.maven</groupId>
                    <artifactId>maven-core</artifactId>
                </exclusion>
                <exclusion>
                    <groupId>org.codehaus.plexus</groupId>
                    <artifactId>plexus-utils</artifactId>
                </exclusion>
            </exclusions>
        </dependency>

        <dependency>
            <groupId>com.spotify</groupId>
            <artifactId>dockerfile-maven-plugin</artifactId>
            <version>1.4.13</version>
        </dependency>
    </dependencies>


    <build>
        <plugins>
            <plugin>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-maven-plugin</artifactId>
                <version>2.4.5</version>
            </plugin>

            <plugin>
                <groupId>com.spotify</groupId>
                <artifactId>docker-maven-plugin</artifactId>
                <version>1.2.2</version>
                <executions>
                    <!-- 当执行 package，执行：mvn clean package docker:build -->
                    <execution>
                        <id>default</id>
                        <phase>package</phase>
                        <goals>
                            <goal>build</goal>
<!--                            <goal>push</goal>-->
                        </goals>
                    </execution>
                </executions>
                <configuration>
                    <!-- 镜像名称 -->
                    <imageName>fengliulin/exam</imageName>

                    <!-- 指定标签 -->
                    <imageTags>
                        <imageTag>latest</imageTag>
                    </imageTags>

                    <!-- 基础镜像jdk1.8 -->
                    <baseImage>java</baseImage>

                    <!-- 制作者提供本人信息 -->
                    <maintainer>fengliulin menin@163.com</maintainer>

                    <!-- 切换到/ROOT目录 -->
                    <workdir>/ROOT</workdir>

                    <cmd>["java","-version"]</cmd>
                    <entryPoint>["java","-jar","demo-0.0.1-SNAPSHOT.jar"]</entryPoint>

                    <!--  -->
                    <!--  -->
                    <!--  -->
                    <!-- 指定 Dockerfile 路径 -->
<!--                    <dockerDirectory>${project.baseUri}/src/main/docker</dockerDirectory>-->

                    <!-- 指定远程 docker api 地址 -->
                    <dockerHost>http://192.168.1.122:2375</dockerHost>

                    <!-- 这里是复制 docker api地址 -->
                    <resources>
                        <resource>
                            <!-- 把maven打包的jar文件复制到docker容器里 -->
                            <targetPath>/ROOT</targetPath>

                            <!-- 用于指定需要复制的根目录，${project.build.directory}表示target目录 -->
                            <directory>${project.build.directory}</directory>

                            <!-- 用于指定需要复制的文件，${project.build.finalName}.jar指的是打包后的jar包文件 -->
                            <include>${project.build.finalName}.jar</include>
                        </resource>
                    </resources>
                </configuration>
            </plugin>
        </plugins>
    </build>

</project>
